{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Getting Started Quickstart Reference Authentication Connection Record RecordCursor BulkRequest App File KintoneAPIException License MIT Copyright Copyright(c) Cybozu, Inc.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#getting-started","text":"Quickstart","title":"Getting Started"},{"location":"#reference","text":"Authentication Connection Record RecordCursor BulkRequest App File KintoneAPIException","title":"Reference"},{"location":"#license","text":"MIT","title":"License"},{"location":"#copyright","text":"Copyright(c) Cybozu, Inc.","title":"Copyright"},{"location":"versions/","text":"kintone-WeChat-miniprogram-sdk Versions Current Version (Latest) Latest version of kintone-WeChat-miniprogram-sdk. Versions Documentation Release 0.1.0 Documentation Release Notes Past Versions Here you can find documentation for previous versions of kintone-WeChat-miniprogram-sdk. Versions Documentation Release 0.1.0 Documentation Release Notes","title":"kintone-WeChat-miniprogram-sdk Versions"},{"location":"versions/#kintone-wechat-miniprogram-sdk-versions","text":"","title":"kintone-WeChat-miniprogram-sdk Versions"},{"location":"versions/#current-version-latest","text":"Latest version of kintone-WeChat-miniprogram-sdk. Versions Documentation Release 0.1.0 Documentation Release Notes","title":"Current Version (Latest)"},{"location":"versions/#past-versions","text":"Here you can find documentation for previous versions of kintone-WeChat-miniprogram-sdk. Versions Documentation Release 0.1.0 Documentation Release Notes","title":"Past Versions"},{"location":"getting-started/quickstart/","text":"Quickstart Requirement Node.js (Version 8.9.3 or later) npm (Version 5.5.1 or later) WeChat Developer Tool (The latest) Base library version of the Mini Program: 2.2.1 or later How to use Step 1 Open WeChat Developer Tool and create a new project. (Ref. \u5fae\u4fe1\u5f00\u53d1\u8005\u5de5\u5177 ) Step 2 Use command tool to run following commands. cd your-project-directory npm init npm install --save @kintone/kintone-wechat-miniprogram-sdk Step 3 At \"WeChat Developer Tool\" Check the setting \"\u589e\u5f3a\u7f16\u8bd1\". (Ref. \u4ee3\u7801\u7f16\u8bd1 - \u589e\u5f3a\u7f16\u8bd1 ) Click \"\u5de5\u5177\" > \"\u6784\u5efanpm\" (Ref. npm \u652f\u6301 ) Code example Get record sample Source code const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneAuthWithAPIToken = (new kintone.Auth()).setApiToken({apiToken: 'MY_TOKEN'}); let kintoneConnection = new kintone.Connection({domain: 'your.FQDN.tld', auth: kintoneAuthWithAPIToken}); let kintoneRecord = new kintone.Record({connection: kintoneConnection}); let appID = 'your_app_id'; let recordID = 'record_id_that_will_be_retrived'; kintoneRecord.getRecord({app: appID, id: recordID}) .then((rsp) => { console.log(rsp); }) .catch((err) => { // The promise function always reject with KintoneAPIException console.log(err.get()); }); Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' } Get record sample with Async Source code const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneAuthWithAPIToken = (new kintone.Auth()).setApiToken({apiToken: 'MY_TOKEN'}); let kintoneConnection = new kintone.Connection({domain: 'your.FQDN.tld', auth: kintoneAuthWithAPIToken}); let kintoneRecord = new kintone.Record({connection: kintoneConnection}); let appID = 'your_app_id'; let recordID = 'record_id_that_will_be_retrived'; let getRecord = async () => { try { let recordResult = await kintoneRecord.getRecord({app: appID, id: recordID}); console.log(recordResult); } catch (error) { // The promise function always reject with KintoneAPIException console.log(error.get()); } } getRecord(); Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' }","title":"Quickstart"},{"location":"getting-started/quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"getting-started/quickstart/#requirement","text":"Node.js (Version 8.9.3 or later) npm (Version 5.5.1 or later) WeChat Developer Tool (The latest) Base library version of the Mini Program: 2.2.1 or later","title":"Requirement"},{"location":"getting-started/quickstart/#how-to-use","text":"Step 1 Open WeChat Developer Tool and create a new project. (Ref. \u5fae\u4fe1\u5f00\u53d1\u8005\u5de5\u5177 ) Step 2 Use command tool to run following commands. cd your-project-directory npm init npm install --save @kintone/kintone-wechat-miniprogram-sdk Step 3 At \"WeChat Developer Tool\" Check the setting \"\u589e\u5f3a\u7f16\u8bd1\". (Ref. \u4ee3\u7801\u7f16\u8bd1 - \u589e\u5f3a\u7f16\u8bd1 ) Click \"\u5de5\u5177\" > \"\u6784\u5efanpm\" (Ref. npm \u652f\u6301 )","title":"How to use"},{"location":"getting-started/quickstart/#code-example","text":"Get record sample Source code const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneAuthWithAPIToken = (new kintone.Auth()).setApiToken({apiToken: 'MY_TOKEN'}); let kintoneConnection = new kintone.Connection({domain: 'your.FQDN.tld', auth: kintoneAuthWithAPIToken}); let kintoneRecord = new kintone.Record({connection: kintoneConnection}); let appID = 'your_app_id'; let recordID = 'record_id_that_will_be_retrived'; kintoneRecord.getRecord({app: appID, id: recordID}) .then((rsp) => { console.log(rsp); }) .catch((err) => { // The promise function always reject with KintoneAPIException console.log(err.get()); }); Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' } Get record sample with Async Source code const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneAuthWithAPIToken = (new kintone.Auth()).setApiToken({apiToken: 'MY_TOKEN'}); let kintoneConnection = new kintone.Connection({domain: 'your.FQDN.tld', auth: kintoneAuthWithAPIToken}); let kintoneRecord = new kintone.Record({connection: kintoneConnection}); let appID = 'your_app_id'; let recordID = 'record_id_that_will_be_retrived'; let getRecord = async () => { try { let recordResult = await kintoneRecord.getRecord({app: appID, id: recordID}); console.log(recordResult); } catch (error) { // The promise function always reject with KintoneAPIException console.log(error.get()); } } getRecord(); Response success { \"record\":{ // record data should be here } } Response error { id: '{ID}', code: '{CODE}', message: '{Message string}', errors: '{JSON String}' }","title":"Code example"},{"location":"reference/app/","text":"App Gets general information of an App, including the name, description, related Space, creator and updater information. Permissions to view the App is needed. API Tokens cannot be used with this API. Constructor Parameter Name Type Required Description params Object yes Constructor params. params.connection Connection yes The connection module of this SDK. Sample code Init app sample const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneApp = new kintone.App({connection: connection}); Methods getApp(params) Get single app Parameter Name Type Required Description params Object yes Get app params. params.id Integer yes The kintone app ID Return Promise Sample code Get app sample const appId = 'your_app_id'; kintoneApp.getApp({id: appId}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getApps(params) Get multiple apps Parameter Name Type Required Description params Object (optional) Get apps params. params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getApps({offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getAppsByIDs(params) Get multiple apps by list of ids Parameter Name Type Required Description params Object yes Get apps by ids params. params.ids Array<Integer> yes The array of app ids params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const ids = ['YOUR_APP_ID_1', 'YOUR_APP_ID_2', 'YOUR_APP_ID_n']; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByIDs({ids, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getAppsByCodes(params) Get multiple apps by a list of codes name Parameter Name Type Required Description params Object yes Get apps by codes params. params.codes Array<String> yes The array of app codes params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByCodes({codes, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getAppsByName(params) Get multiple apps by name Parameter Name Type Required Description params Object yes Get apps by name params. params.name String yes The app name params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const name = 'your_app_name'; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByName({name, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getAppsBySpaceIDs(params) Get multiple apps by list of space's ids Parameter Name Type Required Description params Object yes Get apps by space ids params. params.spaceIds Array<Integer> yes The array of space ids params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const spaceIds = []; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsBySpaceIDs({spaceIds, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); addPreviewApp(params) Creates a preview App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to add preview app. params.name String yes The App name. The maximum length is 64 characters. params.space Integer (optional) The Space ID of where the App will be created. params.thread Integer (optional) The Thread ID of the thread in the Space where the App will be created. It is recommended to ignore this parameter so that Apps are created in the default thread. There is currently no helpful reason to create Apps in threads other than the default thread, as there are no visual representations in kintone of Apps being related to threads. There are only visual representations of Apps being related to Spaces. Return Promise Sample code Add preview App sample const name = 'your_app_name'; const space = 'space_of_app'; const thread = 'thread_id_in_space'; kintoneApp.addPreviewApp({name, space, thread}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); deployAppSettings(params) Updates the settings of a pre-live App to the live App. Parameter Name Type Required Description params Object yes Params to deploy app settings. params.apps Array<JSONObject> yes The list of preview apps. params.apps[].app Integer yes The preview app ID params.apps[].revision Integer (optional) Specify the revision number of the settings that will be deployed. params.revert Boolean (optional) Specify \"true\" to cancel all changes made to the pre-live settings. The pre-live settings will be reverted back to the current settings of the live app. Return Promise Sample code Deploy app settings sample const appPreview = { app: 'preview_app_id', revision: 'settings_revision' }; const apps = [ appPreview // Another app preview here ]; const revert = false; kintoneApp.deployAppSettings({apps, revert}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getAppDeployStatus(params) Gets the deployment status of the App settings for multiple Apps. Parameter Name Type Required Description params Object yes Get app deploy status params. params.apps Array<Integer> yes The list of Apps to check the deploy statuses of. The Maximum limit is 300. If Apps in Guest Spaces are specified, all Apps specified in the request must belong to that Guest Space. Return Promise Sample code Get app deploy status sample const apps = [ 'your_app_id' // Another app id here ]; kintoneApp.getAppDeployStatus({apps}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getViews(params) Gets the View settings of an App. Parameter Name Type Required Description params Object yes Get views params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: Japanese language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the views with a pre-live settings . Return Promise Sample code Get views sample const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA kintoneApp.getViews({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); // Get a pre-live (preview) views const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA const isPreview = true; kintoneApp.getViews({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateViews(params) Update the View settings of an App. Parameter Name Type Required Description params Object yes Params to update views. params.app Integer yes The app ID params.views JSONObject yes An object of data of Views. About the format, please look the sample below or reference at the end of this page params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update views sample const app = 'your_app_id'; const views = { \"Your_view_name\": { \"index\": 0, \"type\": \"your_view_type\", // Default: 'LIST', 'CALENDAR', 'CUSTOM' \"name\": \"Your_view_name\", \"fields\": [ \"your_field_code\" // Another field code here ], \"filterCond\": \"your_query\", \"sort\": \"your_sort\" } // Another view here }; const revision = 'settings_revision'; kintoneApp.updateViews({app, views, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getGeneralSettings(params) Gets the description, name, icon, revision and color theme of an App. Parameter Name Type Required Description params Object yes Get general settings params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the general with a pre-live settings . Return Promise Sample code Get general settings sample const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA kintoneApp.getGeneralSettings({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); // Get a pre-live (preview) general settings const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA const isPreview = true; kintoneApp.getGeneralSettings({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateGeneralSettings(params) Update the description, name, icon, revision and color theme of an App. Parameter Name Type Required Description params Object yes Params to update general settings. params.app Integer yes The app ID params.name String (Conditional) Name of an App. params.description String (Conditional) The description of an App. params.icon Icon (Conditional) The icon of an App. params.theme String (Conditional) Color theme of an App. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update general settings sample const params = { app: 'your_app_id', name: 'APP_NAME', description: 'Here is app description.', icon: { type: 'icon_type', // specified: FILE, PRESET key: 'icon_key' }, theme: 'your_theme' // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK revision: 'settings_revision'; }; kintoneApp.updateGeneralSettings(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getFormFields(params) Get field of form in kintone app Parameter Name Type Required Description params Object yes Get form fields params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the app form fields with a pre-live settings . Return Promise Sample code Get app form field sample const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA kintoneApp.getFormFields({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); // Get a pre-live (preview) form fields const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA const isPreview = true; kintoneApp.getFormFields({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); addFormFields(params) Adds fields to a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to add form fields. params.app Integer yes The app ID params.fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Add app form field sample const app = 'your_app_id'; const fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'the_revision_of_the_settings '; kintoneApp.addFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateFormFields(params) Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to update form fields. params.app Integer yes The app ID params.fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update app form field sample const app = 'your_app_id'; const fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'the_revision_of_the_settings '; kintoneApp.updateFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); deleteFormFields(params) Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to delete form fields. params.app Integer yes The app ID params.fields Array<String> yes The list of field codes of the fields to delete. Up to 100 field codes can be specified. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Delete app form field sample const app = 'your_app_id'; const fields = [ 'your_field_cde' // Another field code here ]; const revision = 'revision_of_the_Settings '; kintoneApp.deleteFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getFormLayout(params) Get layout of form in kintone app Parameter Name Type Required Description params Object yes Get form layout params. params.app Integer yes The kintone app id params.isPreview Boolean (optional) Get the app form layout with a pre-live settings . Return Promise Sample code Get form layout sample const app = 'your_app_id'; // Get form layout kintoneApp.getFormLayout({app}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); // Get a preview (pre-live) form layout const isPreview = true; kintoneApp.getFormLayout({app, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateFormLayout(params) Updates the field layout info of a form in an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to update form layout. params.app Integer yes The kintone app id params.layout Array<JSONObject> yes A list of field layouts for each row. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. Return Promise Sample code Update form layout sample const app = 'your_app_id'; const fisrtRowLayout = { 'type': 'kintone_layout_type', 'fields': [ { 'type': 'kintone_field_type', 'code': 'your_field_code', 'size': { 'width': 'your_field_width' } } ] }; const layout = [ fisrtRowLayout // Another row layout here ]; const revision = 'settings_revision'; // Update form layout kintoneApp.updateFormLayout({app, layout, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); Reference Get App on developer network Get Apps on developer network Get Form fields on developer network Get Form Layout on developer network","title":"App"},{"location":"reference/app/#app","text":"Gets general information of an App, including the name, description, related Space, creator and updater information. Permissions to view the App is needed. API Tokens cannot be used with this API.","title":"App"},{"location":"reference/app/#constructor","text":"Parameter Name Type Required Description params Object yes Constructor params. params.connection Connection yes The connection module of this SDK. Sample code Init app sample const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneApp = new kintone.App({connection: connection});","title":"Constructor"},{"location":"reference/app/#methods","text":"","title":"Methods"},{"location":"reference/app/#getappparams","text":"Get single app Parameter Name Type Required Description params Object yes Get app params. params.id Integer yes The kintone app ID Return Promise Sample code Get app sample const appId = 'your_app_id'; kintoneApp.getApp({id: appId}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getApp(params)"},{"location":"reference/app/#getappsparams","text":"Get multiple apps Parameter Name Type Required Description params Object (optional) Get apps params. params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getApps({offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getApps(params)"},{"location":"reference/app/#getappsbyidsparams","text":"Get multiple apps by list of ids Parameter Name Type Required Description params Object yes Get apps by ids params. params.ids Array<Integer> yes The array of app ids params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const ids = ['YOUR_APP_ID_1', 'YOUR_APP_ID_2', 'YOUR_APP_ID_n']; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByIDs({ids, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getAppsByIDs(params)"},{"location":"reference/app/#getappsbycodesparams","text":"Get multiple apps by a list of codes name Parameter Name Type Required Description params Object yes Get apps by codes params. params.codes Array<String> yes The array of app codes params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const codes = ['YOUR_APP_CODE_1', 'YOUR_APP_CODE_2']; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByCodes({codes, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getAppsByCodes(params)"},{"location":"reference/app/#getappsbynameparams","text":"Get multiple apps by name Parameter Name Type Required Description params Object yes Get apps by name params. params.name String yes The app name params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const name = 'your_app_name'; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsByName({name, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getAppsByName(params)"},{"location":"reference/app/#getappsbyspaceidsparams","text":"Get multiple apps by list of space's ids Parameter Name Type Required Description params Object yes Get apps by space ids params. params.spaceIds Array<Integer> yes The array of space ids params.offset Integer (optional) The offset off data result params.limit Integer (optional) The limit number of result Return Promise Sample code Get apps sample const spaceIds = []; const limit = 'your_limit_number'; const offset = 'your_offset_number'; kintoneApp.getAppsBySpaceIDs({spaceIds, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getAppsBySpaceIDs(params)"},{"location":"reference/app/#addpreviewappparams","text":"Creates a preview App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to add preview app. params.name String yes The App name. The maximum length is 64 characters. params.space Integer (optional) The Space ID of where the App will be created. params.thread Integer (optional) The Thread ID of the thread in the Space where the App will be created. It is recommended to ignore this parameter so that Apps are created in the default thread. There is currently no helpful reason to create Apps in threads other than the default thread, as there are no visual representations in kintone of Apps being related to threads. There are only visual representations of Apps being related to Spaces. Return Promise Sample code Add preview App sample const name = 'your_app_name'; const space = 'space_of_app'; const thread = 'thread_id_in_space'; kintoneApp.addPreviewApp({name, space, thread}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"addPreviewApp(params)"},{"location":"reference/app/#deployappsettingsparams","text":"Updates the settings of a pre-live App to the live App. Parameter Name Type Required Description params Object yes Params to deploy app settings. params.apps Array<JSONObject> yes The list of preview apps. params.apps[].app Integer yes The preview app ID params.apps[].revision Integer (optional) Specify the revision number of the settings that will be deployed. params.revert Boolean (optional) Specify \"true\" to cancel all changes made to the pre-live settings. The pre-live settings will be reverted back to the current settings of the live app. Return Promise Sample code Deploy app settings sample const appPreview = { app: 'preview_app_id', revision: 'settings_revision' }; const apps = [ appPreview // Another app preview here ]; const revert = false; kintoneApp.deployAppSettings({apps, revert}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"deployAppSettings(params)"},{"location":"reference/app/#getappdeploystatusparams","text":"Gets the deployment status of the App settings for multiple Apps. Parameter Name Type Required Description params Object yes Get app deploy status params. params.apps Array<Integer> yes The list of Apps to check the deploy statuses of. The Maximum limit is 300. If Apps in Guest Spaces are specified, all Apps specified in the request must belong to that Guest Space. Return Promise Sample code Get app deploy status sample const apps = [ 'your_app_id' // Another app id here ]; kintoneApp.getAppDeployStatus({apps}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getAppDeployStatus(params)"},{"location":"reference/app/#getviewsparams","text":"Gets the View settings of an App. Parameter Name Type Required Description params Object yes Get views params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: Japanese language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the views with a pre-live settings . Return Promise Sample code Get views sample const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA kintoneApp.getViews({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); // Get a pre-live (preview) views const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA const isPreview = true; kintoneApp.getViews({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getViews(params)"},{"location":"reference/app/#updateviewsparams","text":"Update the View settings of an App. Parameter Name Type Required Description params Object yes Params to update views. params.app Integer yes The app ID params.views JSONObject yes An object of data of Views. About the format, please look the sample below or reference at the end of this page params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update views sample const app = 'your_app_id'; const views = { \"Your_view_name\": { \"index\": 0, \"type\": \"your_view_type\", // Default: 'LIST', 'CALENDAR', 'CUSTOM' \"name\": \"Your_view_name\", \"fields\": [ \"your_field_code\" // Another field code here ], \"filterCond\": \"your_query\", \"sort\": \"your_sort\" } // Another view here }; const revision = 'settings_revision'; kintoneApp.updateViews({app, views, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateViews(params)"},{"location":"reference/app/#getgeneralsettingsparams","text":"Gets the description, name, icon, revision and color theme of an App. Parameter Name Type Required Description params Object yes Get general settings params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the general with a pre-live settings . Return Promise Sample code Get general settings sample const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA kintoneApp.getGeneralSettings({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); // Get a pre-live (preview) general settings const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA const isPreview = true; kintoneApp.getGeneralSettings({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getGeneralSettings(params)"},{"location":"reference/app/#updategeneralsettingsparams","text":"Update the description, name, icon, revision and color theme of an App. Parameter Name Type Required Description params Object yes Params to update general settings. params.app Integer yes The app ID params.name String (Conditional) Name of an App. params.description String (Conditional) The description of an App. params.icon Icon (Conditional) The icon of an App. params.theme String (Conditional) Color theme of an App. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update general settings sample const params = { app: 'your_app_id', name: 'APP_NAME', description: 'Here is app description.', icon: { type: 'icon_type', // specified: FILE, PRESET key: 'icon_key' }, theme: 'your_theme' // specified: WHITE, RED, BLUE, GREEN, YELLOW, BLACK revision: 'settings_revision'; }; kintoneApp.updateGeneralSettings(params).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateGeneralSettings(params)"},{"location":"reference/app/#getformfieldsparams","text":"Get field of form in kintone app Parameter Name Type Required Description params Object yes Get form fields params. params.app Integer yes The app ID params.lang String (optional) The language code. Support: DEFAULT: Default language setting of system JA: English language setting ZH: Chinese language setting EN: English language setting params.isPreview Boolean (optional) Get the app form fields with a pre-live settings . Return Promise Sample code Get app form field sample const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA kintoneApp.getFormFields({app, lang}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); // Get a pre-live (preview) form fields const app = 'your_app_id'; const lang = 'language_code'; // Ex: JA const isPreview = true; kintoneApp.getFormFields({app, lang, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getFormFields(params)"},{"location":"reference/app/#addformfieldsparams","text":"Adds fields to a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to add form fields. params.app Integer yes The app ID params.fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Add app form field sample const app = 'your_app_id'; const fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'the_revision_of_the_settings '; kintoneApp.addFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"addFormFields(params)"},{"location":"reference/app/#updateformfieldsparams","text":"Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to update form fields. params.app Integer yes The app ID params.fields JSONObject yes The formFields which will add to form of kintone app. About the format, please look the sample below or reference at the end of this params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Update app form field sample const app = 'your_app_id'; const fields = { YourFieldCode: { 'type': 'SINGLE_LINE_TEXT', 'code': 'YourFieldCode', 'label': 'Text (single-line)', 'noLabel': false, 'required': true, 'unique': true } // Another field here }; const revision = 'the_revision_of_the_settings '; kintoneApp.updateFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateFormFields(params)"},{"location":"reference/app/#deleteformfieldsparams","text":"Updates the field settings of fields in a form of an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to delete form fields. params.app Integer yes The app ID params.fields Array<String> yes The list of field codes of the fields to delete. Up to 100 field codes can be specified. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. Return Promise Sample code Delete app form field sample const app = 'your_app_id'; const fields = [ 'your_field_cde' // Another field code here ]; const revision = 'revision_of_the_Settings '; kintoneApp.deleteFormFields({app, fields, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"deleteFormFields(params)"},{"location":"reference/app/#getformlayoutparams","text":"Get layout of form in kintone app Parameter Name Type Required Description params Object yes Get form layout params. params.app Integer yes The kintone app id params.isPreview Boolean (optional) Get the app form layout with a pre-live settings . Return Promise Sample code Get form layout sample const app = 'your_app_id'; // Get form layout kintoneApp.getFormLayout({app}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); // Get a preview (pre-live) form layout const isPreview = true; kintoneApp.getFormLayout({app, isPreview}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getFormLayout(params)"},{"location":"reference/app/#updateformlayoutparams","text":"Updates the field layout info of a form in an App. Warning After using this method, use the deployAppSettings to deploy the settings to the live App. Parameter Name Type Required Description params Object yes Params to update form layout. params.app Integer yes The kintone app id params.layout Array<JSONObject> yes A list of field layouts for each row. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) Specify the revision number of the settings that will be deployed. The request will fail if the revision number is not the latest revision. Return Promise Sample code Update form layout sample const app = 'your_app_id'; const fisrtRowLayout = { 'type': 'kintone_layout_type', 'fields': [ { 'type': 'kintone_field_type', 'code': 'your_field_code', 'size': { 'width': 'your_field_width' } } ] }; const layout = [ fisrtRowLayout // Another row layout here ]; const revision = 'settings_revision'; // Update form layout kintoneApp.updateFormLayout({app, layout, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateFormLayout(params)"},{"location":"reference/app/#reference","text":"Get App on developer network Get Apps on developer network Get Form fields on developer network Get Form Layout on developer network","title":"Reference"},{"location":"reference/authentication/","text":"Authentication Authentication module will be used by Connection . This module allows authenticating with the Kintone app by password authenticator or API token authenticator. This module is also supported the basic authenticator. Warning If both the Token and Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used. Constructor Parameter (none) Sample code Init authentication module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneAuth = new kintone.Auth(); Methods setPasswordAuth(params) Set password authentication for Authentication module. Parameter Name Type Required Description params Object yes The parameters that include username, password properties params.username String yes The username that is able to authenticate on kintone app params.password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set password authentication let passwordAuth = { username = 'your_user_name'; password = 'your_password'; } kintoneAuth.setPasswordAuth(passwordAuth); setApiToken(params) Set Api Token for Authentication module. Parameter Name Type Required Description params Object yes The parameters that includes apiToken property params.apiToken String yes The apiToken that is able to authenticate on kintone app Return Auth Set APIToken authentication let params = { apiToken: 'your_token'; } kintoneAuth.setApiToken(params); setBasicAuth(params) Set Basic authentication for Authentication module. Parameter Name Type Required Description params Object yes The parameters that includes username, password properties params.username String yes The username that is able to authenticate on kintone app params.password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set basic authentication let basicAuth = { username = 'your_user_name'; password = 'your_password'; } kintoneAuth.setBasicAuth(basicAuth);","title":"Authentication"},{"location":"reference/authentication/#authentication","text":"Authentication module will be used by Connection . This module allows authenticating with the Kintone app by password authenticator or API token authenticator. This module is also supported the basic authenticator. Warning If both the Token and Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used.","title":"Authentication"},{"location":"reference/authentication/#constructor","text":"Parameter (none) Sample code Init authentication module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneAuth = new kintone.Auth();","title":"Constructor"},{"location":"reference/authentication/#methods","text":"","title":"Methods"},{"location":"reference/authentication/#setpasswordauthparams","text":"Set password authentication for Authentication module. Parameter Name Type Required Description params Object yes The parameters that include username, password properties params.username String yes The username that is able to authenticate on kintone app params.password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set password authentication let passwordAuth = { username = 'your_user_name'; password = 'your_password'; } kintoneAuth.setPasswordAuth(passwordAuth);","title":"setPasswordAuth(params)"},{"location":"reference/authentication/#setapitokenparams","text":"Set Api Token for Authentication module. Parameter Name Type Required Description params Object yes The parameters that includes apiToken property params.apiToken String yes The apiToken that is able to authenticate on kintone app Return Auth Set APIToken authentication let params = { apiToken: 'your_token'; } kintoneAuth.setApiToken(params);","title":"setApiToken(params)"},{"location":"reference/authentication/#setbasicauthparams","text":"Set Basic authentication for Authentication module. Parameter Name Type Required Description params Object yes The parameters that includes username, password properties params.username String yes The username that is able to authenticate on kintone app params.password String yes The password that is able to authenticate on kintone app Return Auth Sample code Set basic authentication let basicAuth = { username = 'your_user_name'; password = 'your_password'; } kintoneAuth.setBasicAuth(basicAuth);","title":"setBasicAuth(params)"},{"location":"reference/bulk-request/","text":"Bulk Request The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API: Add Record Add Records Update Record Update Records Delete Records Update Status Update Statuses Update Assignees Constructor Parameter Name Type Required Description params Object (optional) Constructor params. params.connection Connection yes The connection module of this SDK. Sample code Init bulk request module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneBulkRequest = new kintone.BulkRequest({connection}); Methods All below methods (excluded execute() method) will add request to queue, you must execute the execute() function to get result of BulkRequest. addRecord({app, record}) Parameter See at Record - addRecord Return BulkRequest addRecords({app, records}) Parameter See at Record - addRecords Return BulkRequest updateRecordByID({app, id, record, revision}) Parameter See at Record - updateRecordByID Return BulkRequest updateRecordByUpdateKey({app, updateKey, record, revision}) Parameter See at Record - updateRecordByUpdateKey Return BulkRequest updateRecords({app, records}) Parameter See at Record - updateRecords Return BulkRequest deleteRecords({app, ids}) Parameter See at Record - deleteRecords Return BulkRequest deleteRecordsWithRevision({app, idsWithRevision}) Parameter See at Record - deleteRecordsWithRevision Return BulkRequest updateRecordAssignees({app, id, assignees, revision}) Parameter See at Record - updateRecordAssignees Return BulkRequest updateRecordStatus({app, id, action, assignee, revision}) Parameter See at Record - updateRecordStatus Return BulkRequest updateRecordsStatus({app, records}) Parameter See at Record - updateRecordsStatus Return BulkRequest execute() Execute the bulk request and get data response Parameter (none) Return [Promise] Sample code Execute bulk request const responseBulkRequest = kintoneBulkRequest .addRecord({/*[Args]*/}) .addRecords({/*[Args]*/}) .updateRecords({/*[Args]*/}) .deleteRecords({/*[Args]*/}) .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((errors) => { // write error to console console.log(errors); errors.forEach((err) => { if (typeof err.get === 'function') { console.log(err.get()); } }); }); Reference Get Record on developer network","title":"Bulk Request"},{"location":"reference/bulk-request/#bulk-request","text":"The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API: Add Record Add Records Update Record Update Records Delete Records Update Status Update Statuses Update Assignees","title":"Bulk Request"},{"location":"reference/bulk-request/#constructor","text":"","title":"Constructor"},{"location":"reference/bulk-request/#parameter","text":"Name Type Required Description params Object (optional) Constructor params. params.connection Connection yes The connection module of this SDK.","title":"Parameter"},{"location":"reference/bulk-request/#sample-code","text":"Init bulk request module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneBulkRequest = new kintone.BulkRequest({connection});","title":"Sample code"},{"location":"reference/bulk-request/#methods","text":"All below methods (excluded execute() method) will add request to queue, you must execute the execute() function to get result of BulkRequest.","title":"Methods"},{"location":"reference/bulk-request/#addrecordapp-record","text":"Parameter See at Record - addRecord Return BulkRequest","title":"addRecord({app, record})"},{"location":"reference/bulk-request/#addrecordsapp-records","text":"Parameter See at Record - addRecords Return BulkRequest","title":"addRecords({app, records})"},{"location":"reference/bulk-request/#updaterecordbyidapp-id-record-revision","text":"Parameter See at Record - updateRecordByID Return BulkRequest","title":"updateRecordByID({app, id, record, revision})"},{"location":"reference/bulk-request/#updaterecordbyupdatekeyapp-updatekey-record-revision","text":"Parameter See at Record - updateRecordByUpdateKey Return BulkRequest","title":"updateRecordByUpdateKey({app, updateKey, record, revision})"},{"location":"reference/bulk-request/#updaterecordsapp-records","text":"Parameter See at Record - updateRecords Return BulkRequest","title":"updateRecords({app, records})"},{"location":"reference/bulk-request/#deleterecordsapp-ids","text":"Parameter See at Record - deleteRecords Return BulkRequest","title":"deleteRecords({app, ids})"},{"location":"reference/bulk-request/#deleterecordswithrevisionapp-idswithrevision","text":"Parameter See at Record - deleteRecordsWithRevision Return BulkRequest","title":"deleteRecordsWithRevision({app, idsWithRevision})"},{"location":"reference/bulk-request/#updaterecordassigneesapp-id-assignees-revision","text":"Parameter See at Record - updateRecordAssignees Return BulkRequest","title":"updateRecordAssignees({app, id, assignees, revision})"},{"location":"reference/bulk-request/#updaterecordstatusapp-id-action-assignee-revision","text":"Parameter See at Record - updateRecordStatus Return BulkRequest","title":"updateRecordStatus({app, id, action, assignee, revision})"},{"location":"reference/bulk-request/#updaterecordsstatusapp-records","text":"Parameter See at Record - updateRecordsStatus Return BulkRequest","title":"updateRecordsStatus({app, records})"},{"location":"reference/bulk-request/#execute","text":"Execute the bulk request and get data response Parameter (none) Return [Promise] Sample code Execute bulk request const responseBulkRequest = kintoneBulkRequest .addRecord({/*[Args]*/}) .addRecords({/*[Args]*/}) .updateRecords({/*[Args]*/}) .deleteRecords({/*[Args]*/}) .execute(); responseBulkRequest.then((resp) => { console.log(resp); }).catch((errors) => { // write error to console console.log(errors); errors.forEach((err) => { if (typeof err.get === 'function') { console.log(err.get()); } }); });","title":"execute()"},{"location":"reference/bulk-request/#reference","text":"Get Record on developer network","title":"Reference"},{"location":"reference/connection/","text":"Connection Connection module is used to connect to kintone Rest API This module execute requests using wx.request(Object object) Constructor Parameter Name Type Required Description params Object yes The parameters that include domain, auth, guestSpaceID properties params.domain String yes The domain that is able to authenticate on kintone app params.auth Auth yes The authentication object. params.guestSpaceID Integer optional The guest space id. Use this parameter to connect to kintone guest space. Sample code Init Connection module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); // Define Authentication object let kintoneAuth = new kintone.Auth(); let paramsAuth = { username: 'your_user_name', password: 'your_password', } kintoneAuth.setPasswordAuth(paramsAuth); let paramsConnection = { domain: 'your.FQDN.tld', auth: kintoneAuth } let kintoneConnection = new kintone.Connection(paramsConnection); // Define connection that included guest space let paramsConnection = { domain: 'your.FQDN.tld', auth: kintoneAuth, guestSpaceID: 'guestSpaceID' } let kintoneConnectionWithGuestSpaceDemo = new kintone.Connection(paramsConnection); Methods setHeader(params) Set new header of the Connection Parameter Name Type Required Description params Object yes The parameters that include key, value properties params.key String yes The header's key name params.value String yes The header's value of key Return Connection Sample code Set header of the Connection let params = { key: 'your_header_key', value: 'your_header_value' } kintoneConnection.setHeader(params); addRequestOption(params) Add parameter that supported by wx.request Only \"responseType\" and \"complete\" can be added. Parameter Name Type Required Description params Object yes The parameters that include key, value properties params.key String yes The option's key name params.value String yes The option's value of key Return Connection Sample code Add request option of the Connection let params = { key: 'complete', value: function(){console.log('hello')} } kintoneConnection.addRequestOption(params);","title":"Connection"},{"location":"reference/connection/#connection","text":"Connection module is used to connect to kintone Rest API This module execute requests using wx.request(Object object)","title":"Connection"},{"location":"reference/connection/#constructor","text":"Parameter Name Type Required Description params Object yes The parameters that include domain, auth, guestSpaceID properties params.domain String yes The domain that is able to authenticate on kintone app params.auth Auth yes The authentication object. params.guestSpaceID Integer optional The guest space id. Use this parameter to connect to kintone guest space. Sample code Init Connection module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); // Define Authentication object let kintoneAuth = new kintone.Auth(); let paramsAuth = { username: 'your_user_name', password: 'your_password', } kintoneAuth.setPasswordAuth(paramsAuth); let paramsConnection = { domain: 'your.FQDN.tld', auth: kintoneAuth } let kintoneConnection = new kintone.Connection(paramsConnection); // Define connection that included guest space let paramsConnection = { domain: 'your.FQDN.tld', auth: kintoneAuth, guestSpaceID: 'guestSpaceID' } let kintoneConnectionWithGuestSpaceDemo = new kintone.Connection(paramsConnection);","title":"Constructor"},{"location":"reference/connection/#methods","text":"","title":"Methods"},{"location":"reference/connection/#setheaderparams","text":"Set new header of the Connection Parameter Name Type Required Description params Object yes The parameters that include key, value properties params.key String yes The header's key name params.value String yes The header's value of key Return Connection Sample code Set header of the Connection let params = { key: 'your_header_key', value: 'your_header_value' } kintoneConnection.setHeader(params);","title":"setHeader(params)"},{"location":"reference/connection/#addrequestoptionparams","text":"Add parameter that supported by wx.request Only \"responseType\" and \"complete\" can be added. Parameter Name Type Required Description params Object yes The parameters that include key, value properties params.key String yes The option's key name params.value String yes The option's value of key Return Connection Sample code Add request option of the Connection let params = { key: 'complete', value: function(){console.log('hello')} } kintoneConnection.addRequestOption(params);","title":"addRequestOption(params)"},{"location":"reference/file/","text":"File Download and upload file via kintone Rest API. Constructor Parameter Name Type Required Description params Object yes The parameters that include connection property params.connection Connection yes The connection module of this SDK. Sample code Init app sample const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneFile = new kintone.File({connection}); Methods upload(params) Upload file into kintone Parameter Name Type Required Description params Object yes The parameters that include filePath properties params.filePath String yes The path of file. Refer to the parameter \"filePath\" of wx.uploadFile(Object object) Return Promise Sample code Upload file sample Source code wx.chooseImage({ success(res) { const tempFilePaths = res.tempFilePaths; kintoneFile.upload({filePath: tempFilePaths[0]}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); } }); Response { fileKey: \"{fileKey}\" } download(params) Download file from kintone to the temporary file path Parameter Name Type Required Description params Object yes The parameters that include fileKey properties params.fileKey String yes The file key of the uploaded file on kintone. This is the value that is set on the Attachment field in the response data returned when using the Get Record API. Return Promise Sample code Get apps sample Source code let fileKey = 'your_file_Key'; kintoneFile.download({fileKey}).then(rsp => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); Response { tempFilePath: \"{tempFilePath}\" } Reference Upload File on developer network Download File on developer network wx.downloadFile(Object object) wx.uploadFile(Object object)","title":"File"},{"location":"reference/file/#file","text":"Download and upload file via kintone Rest API.","title":"File"},{"location":"reference/file/#constructor","text":"Parameter Name Type Required Description params Object yes The parameters that include connection property params.connection Connection yes The connection module of this SDK. Sample code Init app sample const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneFile = new kintone.File({connection});","title":"Constructor"},{"location":"reference/file/#methods","text":"","title":"Methods"},{"location":"reference/file/#uploadparams","text":"Upload file into kintone Parameter Name Type Required Description params Object yes The parameters that include filePath properties params.filePath String yes The path of file. Refer to the parameter \"filePath\" of wx.uploadFile(Object object) Return Promise Sample code Upload file sample Source code wx.chooseImage({ success(res) { const tempFilePaths = res.tempFilePaths; kintoneFile.upload({filePath: tempFilePaths[0]}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); } }); Response { fileKey: \"{fileKey}\" }","title":"upload(params)"},{"location":"reference/file/#downloadparams","text":"Download file from kintone to the temporary file path Parameter Name Type Required Description params Object yes The parameters that include fileKey properties params.fileKey String yes The file key of the uploaded file on kintone. This is the value that is set on the Attachment field in the response data returned when using the Get Record API. Return Promise Sample code Get apps sample Source code let fileKey = 'your_file_Key'; kintoneFile.download({fileKey}).then(rsp => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); Response { tempFilePath: \"{tempFilePath}\" }","title":"download(params)"},{"location":"reference/file/#reference","text":"Upload File on developer network Download File on developer network wx.downloadFile(Object object) wx.uploadFile(Object object)","title":"Reference"},{"location":"reference/kintone-api-exception/","text":"kintoneAPIException Handle error responses from kintone Rest API Methods get() Parameter (none) Return Kintone Error Response Sample code Get app with error response Source code let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); Response { \"id\":\"kintone_error_id\", \"code\":\"{kintone_error_code}\", \"message\":\"{kintone_error_message}\", \"errors\": [ /*errors items here*/ ] } getAll() Parameter (none) Return The result of Promise.Reject() Sample code Get apps with error response Source code let appID = {your_invalid_app_id}; kintoneApp.getApp(appID) .catch((err) => { // This SDK return err with KintoneAPIException console.log(err.getAll()); }); Response // Response error object throw() This function will throw result of get() function Parameter (none) Return (none) throwAll() This function will throw result of getAll() function Parameter (none) Return (none) Reference kintone REST API Overview on developer network WeChat Mini Program API wx.request(Object object) wx.downloadFile(Object object) wx.uploadFile(Object object)","title":"Kintone APIException"},{"location":"reference/kintone-api-exception/#kintoneapiexception","text":"Handle error responses from kintone Rest API","title":"kintoneAPIException"},{"location":"reference/kintone-api-exception/#methods","text":"","title":"Methods"},{"location":"reference/kintone-api-exception/#get","text":"Parameter (none) Return Kintone Error Response Sample code Get app with error response Source code let appID = {your_invalid_app_id}; kintoneApp.getApp(appID).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); Response { \"id\":\"kintone_error_id\", \"code\":\"{kintone_error_code}\", \"message\":\"{kintone_error_message}\", \"errors\": [ /*errors items here*/ ] }","title":"get()"},{"location":"reference/kintone-api-exception/#getall","text":"Parameter (none) Return The result of Promise.Reject() Sample code Get apps with error response Source code let appID = {your_invalid_app_id}; kintoneApp.getApp(appID) .catch((err) => { // This SDK return err with KintoneAPIException console.log(err.getAll()); }); Response // Response error object","title":"getAll()"},{"location":"reference/kintone-api-exception/#throw","text":"This function will throw result of get() function Parameter (none) Return (none)","title":"throw()"},{"location":"reference/kintone-api-exception/#throwall","text":"This function will throw result of getAll() function Parameter (none) Return (none)","title":"throwAll()"},{"location":"reference/kintone-api-exception/#reference","text":"kintone REST API Overview on developer network WeChat Mini Program API wx.request(Object object) wx.downloadFile(Object object) wx.uploadFile(Object object)","title":"Reference"},{"location":"reference/record-cursor/","text":"Record Cursor Provide functions to work with kintone Cursor Currently there's only cursor for records. Constructor Parameter Name Type Required Description params Object yes Constructor params. params.connection Connection yes The connection module of this SDK. Sample code Init Record Cursor module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); const passwordAuthParam = { username: 'YOUR_USERNAME', password: 'YOUR_PASSWORD' } const kintoneAuth = (new kintone.Auth()).setPasswordAuth(passwordAuthParam); const connParam = { domain: 'YOUR_DOMAIN', auth: kintoneAuth } const kintoneConn = new kintone.Connection(connParam); const kintoneRC = new kintone.RecordCursor({connection: kintoneConn}); Methods createCursor(params) Create a cursor. Parameter Name Type Required Description params Object yes Create cursor params params.app Integer yes The kintone app ID params.fields Array<String> (optional) List of field codes you want in the response. params.query String (optional) The query string that will specify what records will be responded. params.size Integer (optional) Number of records to retrieve per request. Default: 100. Maximum: 500. Return Promise<CreateCursorResponse> Cursor Object from kintone. Name Type Description id String The cursor ID totalCount Integer The total count of records that match the query conditions Sample code Init Record Cursor module const rcOption = { app: appID, fields: [], query: '', size: 2 } kintoneRC.createCursor(rcOption) .then(function(creatCursorResponse){ const myCursor = creatCursorResponse; console.log('Cursor ID: ' + myCursor.id ); console.log('Total Count: ' + myCursor.totalCount ); }) getRecords(params) Get one block of records. Parameter Name Type Required Description params Object yes Get records create params.id String yes Cursor ID Return Promise<GetRecordCursorResponse> Name Type Description records Array The array of records data next Boolean Show states whether there are more records to get from kintone of cursor. Sample code Get Records Once kintoneRC.getRecords({id: myCursor.id}) .then((getRecordsResponse) => { console.log('RecordCursor result: '); console.log(getRecordsResponse); }) getAllRecords(params) Get all records Parameter Name Type Required Description params Object yes Get all records param params.id String yes Cursor ID Return Promise<GetRecordsResponse> Name Type Description records Array The array of records data totalCount Integer The number of records response. Sample code Get All Records kintoneRC.getAllRecords({id: myCursor.id}) .then((getAllRecordsResponse) => { console.log('RecordCursor result: '); console.log(getAllRecordsResponse); }) deleteCursor(params) Delete a cursor Parameter Name Type Required Description params Object yes Delete cursor param params.id String yes Cursor ID Return None Sample code Delete Cursor kintoneRC.deleteCursor({id: myCursor.id}) .then(function(){ console.log('Cursor Deleted'); }) .catch(function(error){ console.log('Delete cursor fail'); console.log(error) })","title":"Record Cursor"},{"location":"reference/record-cursor/#record-cursor","text":"Provide functions to work with kintone Cursor Currently there's only cursor for records.","title":"Record Cursor"},{"location":"reference/record-cursor/#constructor","text":"Parameter Name Type Required Description params Object yes Constructor params. params.connection Connection yes The connection module of this SDK. Sample code Init Record Cursor module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); const passwordAuthParam = { username: 'YOUR_USERNAME', password: 'YOUR_PASSWORD' } const kintoneAuth = (new kintone.Auth()).setPasswordAuth(passwordAuthParam); const connParam = { domain: 'YOUR_DOMAIN', auth: kintoneAuth } const kintoneConn = new kintone.Connection(connParam); const kintoneRC = new kintone.RecordCursor({connection: kintoneConn});","title":"Constructor"},{"location":"reference/record-cursor/#methods","text":"","title":"Methods"},{"location":"reference/record-cursor/#createcursorparams","text":"Create a cursor. Parameter Name Type Required Description params Object yes Create cursor params params.app Integer yes The kintone app ID params.fields Array<String> (optional) List of field codes you want in the response. params.query String (optional) The query string that will specify what records will be responded. params.size Integer (optional) Number of records to retrieve per request. Default: 100. Maximum: 500. Return Promise<CreateCursorResponse> Cursor Object from kintone. Name Type Description id String The cursor ID totalCount Integer The total count of records that match the query conditions Sample code Init Record Cursor module const rcOption = { app: appID, fields: [], query: '', size: 2 } kintoneRC.createCursor(rcOption) .then(function(creatCursorResponse){ const myCursor = creatCursorResponse; console.log('Cursor ID: ' + myCursor.id ); console.log('Total Count: ' + myCursor.totalCount ); })","title":"createCursor(params)"},{"location":"reference/record-cursor/#getrecordsparams","text":"Get one block of records. Parameter Name Type Required Description params Object yes Get records create params.id String yes Cursor ID Return Promise<GetRecordCursorResponse> Name Type Description records Array The array of records data next Boolean Show states whether there are more records to get from kintone of cursor. Sample code Get Records Once kintoneRC.getRecords({id: myCursor.id}) .then((getRecordsResponse) => { console.log('RecordCursor result: '); console.log(getRecordsResponse); })","title":"getRecords(params)"},{"location":"reference/record-cursor/#getallrecordsparams","text":"Get all records Parameter Name Type Required Description params Object yes Get all records param params.id String yes Cursor ID Return Promise<GetRecordsResponse> Name Type Description records Array The array of records data totalCount Integer The number of records response. Sample code Get All Records kintoneRC.getAllRecords({id: myCursor.id}) .then((getAllRecordsResponse) => { console.log('RecordCursor result: '); console.log(getAllRecordsResponse); })","title":"getAllRecords(params)"},{"location":"reference/record-cursor/#deletecursorparams","text":"Delete a cursor Parameter Name Type Required Description params Object yes Delete cursor param params.id String yes Cursor ID Return None Sample code Delete Cursor kintoneRC.deleteCursor({id: myCursor.id}) .then(function(){ console.log('Cursor Deleted'); }) .catch(function(error){ console.log('Delete cursor fail'); console.log(error) })","title":"deleteCursor(params)"},{"location":"reference/record/","text":"Record Provide manipulate functions on records: get, update, delete, update the record status & assignees in the kintone app Constructor Parameter Name Type Required Description params Object yes Constructor params. params.connection Connection yes The connection module of this SDK. Sample code Init record module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneRecord = new kintone.Record({connection}); Methods getRecord(params) Retrieves details of 1 record from an app. Parameter Name Type Required Description params Object yes Get record params params.app Integer yes The kintone app ID params.id Integer yes The record ID in kintone app Return Promise Sample code Get record const app = 'your_app_id'; const id = 'your_record_id'; kintoneRecord.getRecord({app, id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getRecords(params) Retrieves details of multiple records from an app using a query string. Parameter Name Type Required Description params Object yes Get records params params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. params.totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise Sample code Get records const app = 'your_app_id'; const query = 'your_query_string'; const fields = [ 'your_field_code', // another fieldCode ] const totalCount = 'your_decide_true_or_false'; kintoneRecord.getRecords({app, query, fields, totalCount}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getAllRecordsByQuery(params) Retrieves details of all records from an app using a query string. Can't indicate limit and offset of query. Number of records can be retrieved at once is greater than the default limitations Parameter Name Type Required Description params Object yes Get records by query params params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. params.totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise Sample code Get all records by query without limitation const app = 'your_app_id'; const query = 'your_query_string'; const fields = [ 'your_field_code', // another fieldCode ] const totalCount = 'your_decide_true_or_false'; kintoneRecord.getAllRecordsByQuery({app, query, fields, totalCount}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getAllRecordsByCursor(params) Retrieves details of all records from an app using a query string. Can't indicate limit and offset of query. Number of records can be retrieved at once is greater than the default limitations Parameter Name Type Required Description params Object yes Params to create cursor params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. Return Promise Sample code Get all records by cursor const rcOption = { app: 'your_app_id', fields: [ 'your_field_code', // another fieldCode ], query: 'your_query_string' }; kintoneRecord.getAllRecordsByCursor(rcOption).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); addRecord(params) Add one record to an app. Parameter Name Type Required Description params Object yes Params to add record params.app Integer yes The kintone app ID params.record JSONObject (optional) The record data to be add to kintone app. About the format, please look the sample below or reference at the end of this page Return Promise Sample code Add record const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; kintoneRecord.addRecord({app, record}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); addRecords(params) Add multiple records to an app. Parameter Name Type Required Description params Object yes Params to add records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add multi records const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const records = [ record, // another record ]; kintoneRecord.addRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); addAllRecords(params) Add multiple records to an app. Can insert over 2000 records to kintone app, but can't do rollback. Parameter Name Type Required Description params Object yes Params to add all record params.app Integer yes The kintone app ID params.records Array<JSONObject> yes List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add all records without limitation const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const records = [ record // another record ]; kintoneRecord.addAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occur in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occur in record 4000 // err response // { // results: [ // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); updateRecordByID(params) Updates details of 1 record in an app by specifying its record number. Parameter Name Type Required Description params Object yes Params to update record by id params.app Integer yes The kintone app ID params.id Integer yes The record ID on kintone app params.record JSONObject yes The record data to be update in kintone app. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Update record by ID const app = 'your_app_id'; const id = 'your_record_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = 'revision_of_record'; kintoneRecord.updateRecordByID({app, id, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateRecordByUpdateKey(params) Updates details of 1 record in an app by unique key. Parameter Name Type Required Description params Object yes Params to update record by update key params.app Integer yes The kintone app ID params.updateKey JSONObject yes The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. params.record JSONObject yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Update record by UpdateKey const app = 'your_app_id'; const updateKey = { field: 'your_fieldcode', value: 'your_fieldcode_value' }; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = 'revision_of_record'; kintoneRecord.updateRecordByUpdateKey({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateRecords(params) Updates details of multiple records in an app, by specifying their record number, or a different unique key. Parameter Name Type Required Description params Object yes Params to update records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Update multi records const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const recordUpdate = { id: 'your_record_id', // Optional. Required, if updateKey will not be specified. updateKey: { // Optional. Required, if id will not be specified. field: 'your_field_code', value: 'your_field_code_value' }, record: record, revision: 'record_revision_number' // Optional }; const records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateAllRecords(params) Updates details of multiple records in an app, by specifying their record number, or a different unique key. Can update over 2000 records to kintone app, but can't do rollback. Parameter Name Type Required Description params Object yes Params to update all records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Update all records without limitation const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const recordUpdate = { id: 'your_record_id', // Optional. Required, if updateKey will not be specified. updateKey: { // Optional. Required, if id will not be specified. field: 'your_field_code', value: 'your_field_code_value' }, record: record, revision: 'record_revision_number' // Optional }; const records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occur in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occur in record 4000 // err response // { // results: [ // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); deleteRecords(params) Deletes multiple records in an app. Parameter Name Type Required Description params Object yes Params to delete records params.app Integer yes The kintone app ID params.ids Array<Integer> yes The list ids of record will be delete. Return Promise Sample code Delete multi record const app = 'your_app_id'; const ids = ['your_record_id'] kintoneRecord.deleteRecords({app, ids}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); deleteRecordsWithRevision(params) Deletes multiple records in an app with revision. Parameter Name Type Required Description params Object yes Params to delete record with revision params.app Integer yes The kintone app ID params.idsWithRevision JSONObject yes JSONObject format by HashTable< Integer , Integer > ( key : The Id of record , value : The Revision of record. ) Return Promise Sample code Delete record with revision const app = 'your_app_id'; const idsWithRevision = { /*your_record_id: revision_of_record*/ } kintoneRecord.deleteRecordsWithRevision({app, idsWithRevision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); deleteAllRecordsByQuery(params) Deletes all records in an app by query string Can delete over 2000 records, but can't do rollback. Parameter Name Type Required Description params Object yes Delete all records by query params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. Return Promise Sample code Delete all records by query string const app = 'your_app_id'; const query = 'your_query_string'; kintoneRecord.deleteAllRecordsByQuery({app, query}).then((rsp) => { console.log(rsp); }) .catch((err) => { /// Ex: User update 6000 records: // Case 1: the error occur in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occur in record 4000 // err response // { // results: [ // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) }); upsertRecord(params) Insert or update a record to kintone app. Insert the record if the updateKey doesn't exists and update the record if the updateKey exists. Parameter Name Type Required Description params Object yes Params to upsert record params.app Integer yes The kintone app ID params.updateKey JSONObject yes The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. params.record JSONObject yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Upsert record by UpdateKey const app = 'your_app_id'; const updateKey = { field: 'your_fieldcode', value: 'your_fieldcode_value' }; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = 'revision_of_record'; kintoneRecord.upsertRecord({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); upsertRecords(params) Insert or update up to 1500 records to kintone app. If the records are over 1500, It is thrown Error. Insert the records if the updateKey doesn't exists and update the records if the updateKey exists. Parameter Name Type Required Description params Object yes Params to upsert records params.app Integer yes The kintone app ID params.records Array yes The record data Array which has updateKey and record. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Upsert records by UpdateKey const app = 'your_app_id'; const records = [ { updateKey: { field: 'your_fieldcode', value: 'your_fieldcode_value_1' }, record: { YourFieldCode: { value: 'Value Of YourFieldCode 1' }, } }, { updateKey: { field: 'your_fieldcode', value: 'your_fieldcode_value_2' }, record: { YourFieldCode: { value: 'Value Of YourFieldCode 2' }, } }, { updateKey: { field: 'your_fieldcode', value: 'your_fieldcode_value_3' }, record: { YourFieldCode: { value: 'Value Of YourFieldCode 3' }, } } ]; recordModule.upsertRecords({app, records}).then((resp) => { console.log(resp); }).catch((e) => { /// Ex: User upsert over 100 records: // Case 1: the error occurs on a first record // err response // { // results: [KintoneAPIException, {},...] // } // Case 2: the error occurs on the 100th or more record // err response // { // results: [{},..., KintoneAPIException, {},...] // } console.log(err.get()); }); updateRecordAssignees(params) Update assignees of a record. Parameter Name Type Required Description params Object yes Params to update record assignees params.app Integer yes The kintone app ID params.id Integer yes The record ID of kintone app params.assignees Array<String> yes The user code(s) of the assignee(s) params.revision Integer (option) The revision number of record Return Promise Sample code update record Assignees const app = 'your_app_id'; const id = 'your_record_id'; const assignees = ['your_assignee(s)']; const revision = 'revision_of_record'; kintoneRecord.updateRecordAssignees({app, id, assignees, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateRecordStatus(params) Updates the Status of a record of an app. Parameter Name Type Required Description params Object yes Params to update record status params.app Integer yes The kintone app ID. params.id Integer yes The record ID on kintone app. params.action String yes The Action name will be run. params.assignee String (Conditionally required) The next Assignee. Specify the Assignee's log in name. Required, if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists. params.revision Integer (optional) The revision of record Return Promise Sample code Update record status const app = 'your_app_id'; const id = 'your_record_id'; const action = 'your_action_name'; const assignee = 'your_assignee'; const revision = 'revision_of_record'; kintoneRecord.updateRecordStatus({app, id, action, assignee, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); updateRecordsStatus(params) Updates the Status of multiple records of an app. Parameter Name Type Required Description params Object yes Params to update records status params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The recod status data. See belowsample codee or reference at the end of this page to know format. Return Promise Sample code Update multi record status const app = 'your_app_id'; const recordStatusUpdateItem = { id: 'your_record_id', action: 'your_action_name', assignee: 'your_assignee', revision: 'your_record_revision' } const records = [ recordStatusUpdateItem, // another data like recordStatusUpdateItem ]; kintoneRecord.updateRecordsStatus({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); getComments(params) Parameter Name Type Required Description params Object yes Params to get comments params.app Integer yes The kintone app ID params.record Integer yes The ID of record params.order String (optional) The sort order of the Comment ID. Please select asc or desc params.offset Integer (optional) The number of first comments will be ignored. params.limit Integer (optional) The number of records to retrieve. Return Promise Sample code Get comments const app = 'your_app_id'; const record = 'your_record_id'; const order = 'your_order_type'; // asc or desc const offset = 'your_offset_number'; const limit = 'your_limit number'; kintoneRecord.getComments({app, record, order, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); addComment(params) Parameter Name Type Required Description params Object yes Params to add comment params.app Integer yes The kintone app ID params.record Integer yes The ID of record params.comment JSONObject yes About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add comment const app = 'your_app_id'; const record = 'your_record_id'; const comment = { text: 'your_comment_content', mentions: [ { code: 'your_member_code', type: 'your_member_type' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); deleteComment(params) Parameter Name Type Required Description params Object yes Params to delete comment params.app Integer yes The kintone app ID params.record Integer yes The record ID on kintone app params.comment Integer yes The comment ID on kintone record Return Promise Sample code Delete comment const app = 'your_app_id'; const record = 'your_record_id'; const comment = 'your_comment_id'; kintoneRecord.deleteComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); }); Reference Get Record on developer network Add Record on developer network Update Record on developer network Delete Record on developer network Get Comments on developer network Add Comment on developer network Delete Comment on developer network Update Record Status on developer network Update Record Assignees on developer network","title":"Record"},{"location":"reference/record/#record","text":"Provide manipulate functions on records: get, update, delete, update the record status & assignees in the kintone app","title":"Record"},{"location":"reference/record/#constructor","text":"Parameter Name Type Required Description params Object yes Constructor params. params.connection Connection yes The connection module of this SDK. Sample code Init record module const kintone = require('@kintone/kintone-wechat-miniprogram-sdk'); let kintoneRecord = new kintone.Record({connection});","title":"Constructor"},{"location":"reference/record/#methods","text":"","title":"Methods"},{"location":"reference/record/#getrecordparams","text":"Retrieves details of 1 record from an app. Parameter Name Type Required Description params Object yes Get record params params.app Integer yes The kintone app ID params.id Integer yes The record ID in kintone app Return Promise Sample code Get record const app = 'your_app_id'; const id = 'your_record_id'; kintoneRecord.getRecord({app, id}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getRecord(params)"},{"location":"reference/record/#getrecordsparams","text":"Retrieves details of multiple records from an app using a query string. Parameter Name Type Required Description params Object yes Get records params params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. params.totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise Sample code Get records const app = 'your_app_id'; const query = 'your_query_string'; const fields = [ 'your_field_code', // another fieldCode ] const totalCount = 'your_decide_true_or_false'; kintoneRecord.getRecords({app, query, fields, totalCount}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getRecords(params)"},{"location":"reference/record/#getallrecordsbyqueryparams","text":"Retrieves details of all records from an app using a query string. Can't indicate limit and offset of query. Number of records can be retrieved at once is greater than the default limitations Parameter Name Type Required Description params Object yes Get records by query params params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. params.totalCount Boolean (optional) If \"true\", the request will retrieve total count of records match with query conditions. Return Promise Sample code Get all records by query without limitation const app = 'your_app_id'; const query = 'your_query_string'; const fields = [ 'your_field_code', // another fieldCode ] const totalCount = 'your_decide_true_or_false'; kintoneRecord.getAllRecordsByQuery({app, query, fields, totalCount}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getAllRecordsByQuery(params)"},{"location":"reference/record/#getallrecordsbycursorparams","text":"Retrieves details of all records from an app using a query string. Can't indicate limit and offset of query. Number of records can be retrieved at once is greater than the default limitations Parameter Name Type Required Description params Object yes Params to create cursor params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. params.fields Array<String> (optional) List of field codes you want in the response. Return Promise Sample code Get all records by cursor const rcOption = { app: 'your_app_id', fields: [ 'your_field_code', // another fieldCode ], query: 'your_query_string' }; kintoneRecord.getAllRecordsByCursor(rcOption).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getAllRecordsByCursor(params)"},{"location":"reference/record/#addrecordparams","text":"Add one record to an app. Parameter Name Type Required Description params Object yes Params to add record params.app Integer yes The kintone app ID params.record JSONObject (optional) The record data to be add to kintone app. About the format, please look the sample below or reference at the end of this page Return Promise Sample code Add record const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; kintoneRecord.addRecord({app, record}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"addRecord(params)"},{"location":"reference/record/#addrecordsparams","text":"Add multiple records to an app. Parameter Name Type Required Description params Object yes Params to add records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add multi records const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const records = [ record, // another record ]; kintoneRecord.addRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"addRecords(params)"},{"location":"reference/record/#addallrecordsparams","text":"Add multiple records to an app. Can insert over 2000 records to kintone app, but can't do rollback. Parameter Name Type Required Description params Object yes Params to add all record params.app Integer yes The kintone app ID params.records Array<JSONObject> yes List of records data to be add to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add all records without limitation const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const records = [ record // another record ]; kintoneRecord.addAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occur in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occur in record 4000 // err response // { // results: [ // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // AddRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) });","title":"addAllRecords(params)"},{"location":"reference/record/#updaterecordbyidparams","text":"Updates details of 1 record in an app by specifying its record number. Parameter Name Type Required Description params Object yes Params to update record by id params.app Integer yes The kintone app ID params.id Integer yes The record ID on kintone app params.record JSONObject yes The record data to be update in kintone app. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Update record by ID const app = 'your_app_id'; const id = 'your_record_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = 'revision_of_record'; kintoneRecord.updateRecordByID({app, id, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateRecordByID(params)"},{"location":"reference/record/#updaterecordbyupdatekeyparams","text":"Updates details of 1 record in an app by unique key. Parameter Name Type Required Description params Object yes Params to update record by update key params.app Integer yes The kintone app ID params.updateKey JSONObject yes The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. params.record JSONObject yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Update record by UpdateKey const app = 'your_app_id'; const updateKey = { field: 'your_fieldcode', value: 'your_fieldcode_value' }; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = 'revision_of_record'; kintoneRecord.updateRecordByUpdateKey({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateRecordByUpdateKey(params)"},{"location":"reference/record/#updaterecordsparams","text":"Updates details of multiple records in an app, by specifying their record number, or a different unique key. Parameter Name Type Required Description params Object yes Params to update records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Update multi records const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const recordUpdate = { id: 'your_record_id', // Optional. Required, if updateKey will not be specified. updateKey: { // Optional. Required, if id will not be specified. field: 'your_field_code', value: 'your_field_code_value' }, record: record, revision: 'record_revision_number' // Optional }; const records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateRecords(params)"},{"location":"reference/record/#updateallrecordsparams","text":"Updates details of multiple records in an app, by specifying their record number, or a different unique key. Can update over 2000 records to kintone app, but can't do rollback. Parameter Name Type Required Description params Object yes Params to update all records params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Update all records without limitation const app = 'your_app_id'; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const recordUpdate = { id: 'your_record_id', // Optional. Required, if updateKey will not be specified. updateKey: { // Optional. Required, if id will not be specified. field: 'your_field_code', value: 'your_field_code_value' }, record: record, revision: 'record_revision_number' // Optional }; const records = [ recordUpdate, // Another recordUpdate ] kintoneRecord.updateAllRecords({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // Ex: User update 6000 records: // Case 1: the error occur in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occur in record 4000 // err response // { // results: [ // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // UpdateRecordsResponse, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) });","title":"updateAllRecords(params)"},{"location":"reference/record/#deleterecordsparams","text":"Deletes multiple records in an app. Parameter Name Type Required Description params Object yes Params to delete records params.app Integer yes The kintone app ID params.ids Array<Integer> yes The list ids of record will be delete. Return Promise Sample code Delete multi record const app = 'your_app_id'; const ids = ['your_record_id'] kintoneRecord.deleteRecords({app, ids}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"deleteRecords(params)"},{"location":"reference/record/#deleterecordswithrevisionparams","text":"Deletes multiple records in an app with revision. Parameter Name Type Required Description params Object yes Params to delete record with revision params.app Integer yes The kintone app ID params.idsWithRevision JSONObject yes JSONObject format by HashTable< Integer , Integer > ( key : The Id of record , value : The Revision of record. ) Return Promise Sample code Delete record with revision const app = 'your_app_id'; const idsWithRevision = { /*your_record_id: revision_of_record*/ } kintoneRecord.deleteRecordsWithRevision({app, idsWithRevision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"deleteRecordsWithRevision(params)"},{"location":"reference/record/#deleteallrecordsbyqueryparams","text":"Deletes all records in an app by query string Can delete over 2000 records, but can't do rollback. Parameter Name Type Required Description params Object yes Delete all records by query params.app Integer yes The kintone app ID params.query String (optional) The query string that will specify what records will be responded. Return Promise Sample code Delete all records by query string const app = 'your_app_id'; const query = 'your_query_string'; kintoneRecord.deleteAllRecordsByQuery({app, query}).then((rsp) => { console.log(rsp); }) .catch((err) => { /// Ex: User update 6000 records: // Case 1: the error occur in record 0 // err response // { // results: [KintoneAPIException, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},{}] // } // Case 2: the error occur in record 4000 // err response // { // results: [ // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // RecordsResponseDelete, // KintoneAPIException, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {}, // {} // ] // } console.log(err) });","title":"deleteAllRecordsByQuery(params)"},{"location":"reference/record/#upsertrecordparams","text":"Insert or update a record to kintone app. Insert the record if the updateKey doesn't exists and update the record if the updateKey exists. Parameter Name Type Required Description params Object yes Params to upsert record params.app Integer yes The kintone app ID params.updateKey JSONObject yes The unique key of the record to be updated. About the format, please look the sample below or reference at the end of this page. params.record JSONObject yes The record data will be added to kintone app. About the format, please look the sample below or reference at the end of this page. params.revision Integer (optional) The revision number of record Return Promise Sample code Upsert record by UpdateKey const app = 'your_app_id'; const updateKey = { field: 'your_fieldcode', value: 'your_fieldcode_value' }; const record = { YourFieldCode: { value: 'Value Of YourFieldCode' }, // Another fieldcode here }; const revision = 'revision_of_record'; kintoneRecord.upsertRecord({app, updateKey, record, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"upsertRecord(params)"},{"location":"reference/record/#upsertrecordsparams","text":"Insert or update up to 1500 records to kintone app. If the records are over 1500, It is thrown Error. Insert the records if the updateKey doesn't exists and update the records if the updateKey exists. Parameter Name Type Required Description params Object yes Params to upsert records params.app Integer yes The kintone app ID params.records Array yes The record data Array which has updateKey and record. About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Upsert records by UpdateKey const app = 'your_app_id'; const records = [ { updateKey: { field: 'your_fieldcode', value: 'your_fieldcode_value_1' }, record: { YourFieldCode: { value: 'Value Of YourFieldCode 1' }, } }, { updateKey: { field: 'your_fieldcode', value: 'your_fieldcode_value_2' }, record: { YourFieldCode: { value: 'Value Of YourFieldCode 2' }, } }, { updateKey: { field: 'your_fieldcode', value: 'your_fieldcode_value_3' }, record: { YourFieldCode: { value: 'Value Of YourFieldCode 3' }, } } ]; recordModule.upsertRecords({app, records}).then((resp) => { console.log(resp); }).catch((e) => { /// Ex: User upsert over 100 records: // Case 1: the error occurs on a first record // err response // { // results: [KintoneAPIException, {},...] // } // Case 2: the error occurs on the 100th or more record // err response // { // results: [{},..., KintoneAPIException, {},...] // } console.log(err.get()); });","title":"upsertRecords(params)"},{"location":"reference/record/#updaterecordassigneesparams","text":"Update assignees of a record. Parameter Name Type Required Description params Object yes Params to update record assignees params.app Integer yes The kintone app ID params.id Integer yes The record ID of kintone app params.assignees Array<String> yes The user code(s) of the assignee(s) params.revision Integer (option) The revision number of record Return Promise Sample code update record Assignees const app = 'your_app_id'; const id = 'your_record_id'; const assignees = ['your_assignee(s)']; const revision = 'revision_of_record'; kintoneRecord.updateRecordAssignees({app, id, assignees, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateRecordAssignees(params)"},{"location":"reference/record/#updaterecordstatusparams","text":"Updates the Status of a record of an app. Parameter Name Type Required Description params Object yes Params to update record status params.app Integer yes The kintone app ID. params.id Integer yes The record ID on kintone app. params.action String yes The Action name will be run. params.assignee String (Conditionally required) The next Assignee. Specify the Assignee's log in name. Required, if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists. params.revision Integer (optional) The revision of record Return Promise Sample code Update record status const app = 'your_app_id'; const id = 'your_record_id'; const action = 'your_action_name'; const assignee = 'your_assignee'; const revision = 'revision_of_record'; kintoneRecord.updateRecordStatus({app, id, action, assignee, revision}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateRecordStatus(params)"},{"location":"reference/record/#updaterecordsstatusparams","text":"Updates the Status of multiple records of an app. Parameter Name Type Required Description params Object yes Params to update records status params.app Integer yes The kintone app ID params.records Array<JSONObject> yes The recod status data. See belowsample codee or reference at the end of this page to know format. Return Promise Sample code Update multi record status const app = 'your_app_id'; const recordStatusUpdateItem = { id: 'your_record_id', action: 'your_action_name', assignee: 'your_assignee', revision: 'your_record_revision' } const records = [ recordStatusUpdateItem, // another data like recordStatusUpdateItem ]; kintoneRecord.updateRecordsStatus({app, records}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"updateRecordsStatus(params)"},{"location":"reference/record/#getcommentsparams","text":"Parameter Name Type Required Description params Object yes Params to get comments params.app Integer yes The kintone app ID params.record Integer yes The ID of record params.order String (optional) The sort order of the Comment ID. Please select asc or desc params.offset Integer (optional) The number of first comments will be ignored. params.limit Integer (optional) The number of records to retrieve. Return Promise Sample code Get comments const app = 'your_app_id'; const record = 'your_record_id'; const order = 'your_order_type'; // asc or desc const offset = 'your_offset_number'; const limit = 'your_limit number'; kintoneRecord.getComments({app, record, order, offset, limit}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"getComments(params)"},{"location":"reference/record/#addcommentparams","text":"Parameter Name Type Required Description params Object yes Params to add comment params.app Integer yes The kintone app ID params.record Integer yes The ID of record params.comment JSONObject yes About the format, please look the sample below or reference at the end of this page. Return Promise Sample code Add comment const app = 'your_app_id'; const record = 'your_record_id'; const comment = { text: 'your_comment_content', mentions: [ { code: 'your_member_code', type: 'your_member_type' // either `USER` or `GROUP` or `ORGANIZATION` }, // another mention here ] }; kintoneRecord.addComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"addComment(params)"},{"location":"reference/record/#deletecommentparams","text":"Parameter Name Type Required Description params Object yes Params to delete comment params.app Integer yes The kintone app ID params.record Integer yes The record ID on kintone app params.comment Integer yes The comment ID on kintone record Return Promise Sample code Delete comment const app = 'your_app_id'; const record = 'your_record_id'; const comment = 'your_comment_id'; kintoneRecord.deleteComment({app, record, comment}).then((rsp) => { console.log(rsp); }).catch((err) => { // This SDK return err with KintoneAPIException console.log(err.get()); });","title":"deleteComment(params)"},{"location":"reference/record/#reference","text":"Get Record on developer network Add Record on developer network Update Record on developer network Delete Record on developer network Get Comments on developer network Add Comment on developer network Delete Comment on developer network Update Record Status on developer network Update Record Assignees on developer network","title":"Reference"}]}